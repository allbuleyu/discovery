// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package diss

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FirstDiscoveryServiceClient is the client API for FirstDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FirstDiscoveryServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	FallInLove(ctx context.Context, in *FallInLoveRequest, opts ...grpc.CallOption) (*FallInLoveResponse, error)
}

type firstDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFirstDiscoveryServiceClient(cc grpc.ClientConnInterface) FirstDiscoveryServiceClient {
	return &firstDiscoveryServiceClient{cc}
}

func (c *firstDiscoveryServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/proto.FirstDiscoveryService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firstDiscoveryServiceClient) FallInLove(ctx context.Context, in *FallInLoveRequest, opts ...grpc.CallOption) (*FallInLoveResponse, error) {
	out := new(FallInLoveResponse)
	err := c.cc.Invoke(ctx, "/proto.FirstDiscoveryService/FallInLove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirstDiscoveryServiceServer is the server API for FirstDiscoveryService service.
// All implementations must embed UnimplementedFirstDiscoveryServiceServer
// for forward compatibility
type FirstDiscoveryServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	FallInLove(context.Context, *FallInLoveRequest) (*FallInLoveResponse, error)
	mustEmbedUnimplementedFirstDiscoveryServiceServer()
}

// UnimplementedFirstDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFirstDiscoveryServiceServer struct {
}

func (UnimplementedFirstDiscoveryServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedFirstDiscoveryServiceServer) FallInLove(context.Context, *FallInLoveRequest) (*FallInLoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FallInLove not implemented")
}
func (UnimplementedFirstDiscoveryServiceServer) mustEmbedUnimplementedFirstDiscoveryServiceServer() {}

// UnsafeFirstDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirstDiscoveryServiceServer will
// result in compilation errors.
type UnsafeFirstDiscoveryServiceServer interface {
	mustEmbedUnimplementedFirstDiscoveryServiceServer()
}

func RegisterFirstDiscoveryServiceServer(s grpc.ServiceRegistrar, srv FirstDiscoveryServiceServer) {
	s.RegisterService(&FirstDiscoveryService_ServiceDesc, srv)
}

func _FirstDiscoveryService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirstDiscoveryServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FirstDiscoveryService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirstDiscoveryServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirstDiscoveryService_FallInLove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FallInLoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirstDiscoveryServiceServer).FallInLove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FirstDiscoveryService/FallInLove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirstDiscoveryServiceServer).FallInLove(ctx, req.(*FallInLoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FirstDiscoveryService_ServiceDesc is the grpc.ServiceDesc for FirstDiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FirstDiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FirstDiscoveryService",
	HandlerType: (*FirstDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _FirstDiscoveryService_Hello_Handler,
		},
		{
			MethodName: "FallInLove",
			Handler:    _FirstDiscoveryService_FallInLove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/discovery.proto",
}
